require 'rails_helper'
require 'factories'

def fill_in_fields (options = {})
  fill_in 'environment_name', with: options[:environment_name] if options.has_key? :environment_name
  fill_in 'environment_description', with: options[:environment_description] if options.has_key? :environment_description

  if options.has_key? :environment_key
    within "#environment_key_field" do
      expect(page).to have_field "override_key", type: 'checkbox'
      check "override_key"
      expect(page).to have_field "environment_key", readonly: false
      fill_in 'environment_key', with: options[:environment_key]
    end
  end

end

feature 'Environment' do

  before(:all) do |example|
    set_module example.class.description
  end

  before(:each) do |example|
    user_login
  end

  after(:each) do |example|
    generate_screenshot example.description.parameterize
  end

  scenario 'Saving blank Environment form should return an error', :js => true do
    add_new_module_item do
      click_button "Save"
      within ('div.alert-danger') do
        expect(page).to have_content "#{@module_info[:name]} failed to be created"
        expect(page).to have_content "- Name can't be blank"
        expect(page).to have_content "- Key can't be blank"
        expect(page).to have_content "- Key should contain alpha numeric and underscore characters only"
      end
    end
  end

  scenario 'Cancelling add should return no actions were taken', :js => true do
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description",
      })
      click_button "Cancel"
      within ('div.alert-info') { expect(page).to have_content("No actions were taken") }
    end
  end

  scenario 'Adding Environment with required fields should work', :js => true do
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description"
      })
      click_button "Save"
      within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully created") }
    end
  end

  scenario 'Save and Add another should save Environment and remain in the Environment form page', :js => true do
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description"
      })
      click_button "Save and add another"
      within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully created") }
      expect(page).to have_content "New #{@module_info[:name]}"
    end
  end

  scenario 'Save and Edit button should save Environment record and remain in filled-up form page', :js => true do
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description"
      })
      click_button "Save and edit"
      within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully created") }
      expect(page).to have_content "Edit #{@module_info[:name]}"
    end
  end

  scenario 'Saving duplicate name and key should not work', :js => true do
    environment = FactoryBot.create :environment, application: @application
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description"
      })
      click_button "Save and edit"
      within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully created") }
      expect(page).to have_field "environment_name", with: "Test Environment"
      expect(page).to have_field "environment_description", with: "Test Environment description"
      expect(page).to have_field "environment_key", with: "test_environment"
    end

    fill_in_fields ({
        environment_name: environment.name,
        environment_key: environment.key
    })
    click_button "Save and edit"
    within ('div.alert-danger') do
      expect(page).to have_content "#{@module_info[:name]} failed to be updated"
      expect(page).to have_content "- Name has already been taken"
      expect(page).to have_content "- Key has already been taken. Note: key is generated by converting name to lowercase and symbols to underscores by default."
    end

  end

  scenario 'Clicking Show should allow user to view Environment information', :js => true do
    environment = FactoryBot.create :environment, application: @application
    visit "/admin"
    go_to_module_dashboard
    find_and_show environment.name
    expect(page).to have_content "Details for #{@module_info[:name]} '#{environment.name}'"
  end

  scenario 'Clicking Edit should allow user to update Environment information', :js => true do
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description"
      })
      click_button "Save"
      within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully created") }
    end

    visit "/admin"
    go_to_module_dashboard
    find_and_edit "Test Environment"
    fill_in_fields ({
        environment_name: "Test Environment new name",
        environment_description: "Test Environment new description"
    })
    click_button "Save and edit"
    expect(page).to have_content "#{@module_info[:name]} successfully updated"
    expect(page).to have_field "environment_name", with: "Test Environment new name"
    expect(page).to have_field "environment_description", with: "Test Environment new description"
  end

  scenario 'Cancelling delete should not remove Environment record from list', :js => true do
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description"
      })
      click_button "Save"
      within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully created") }
    end

    visit "/admin"
    go_to_module_dashboard
    find_and_edit "Test Environment"
    within ('ul.nav-tabs') { click_link 'Delete' }
    expect(page).to have_content "Delete #{@module_info[:name]} 'Test Environment'"

    click_button "Cancel"
    within ('div.alert-info') { expect(page).to have_content("No actions were taken") }
    expect(page).to have_content "Edit #{@module_info[:name]} 'Test Environment'"
  end

  scenario 'Deleting Environment object should remove data from list', :js => true do
    add_new_module_item do
      fill_in_fields ({
          environment_name: "Test Environment",
          environment_description: "Test Environment description"
      })
      click_button "Save"
      within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully created") }
    end

    go_to_module_dashboard
    find_and_edit "Test Environment"
    within ('ul.nav-tabs') { click_link 'Delete' }
    expect(page).to have_content "Delete #{@module_info[:name]} 'Test Environment'"

    click_button "Yes, I'm sure"
    within ('div.alert-success') { expect(page).to have_content("#{@module_info[:name]} successfully deleted") }
  end


end