require 'spec_helper'
require 'factories'

describe 'Environment properties', type: :model do

  before(:each) do
    @application = FactoryBot.create(:application)
    define_record_factory(nil, @application)
  end

  it 'is not valid when attributes are not defined' do
    env = EnvironmentProperty.new
    expect { env.save! }.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name can't be blank, Key can't be blank, Key should contain alpha numeric and underscore characters only")
  end

  it 'is not valid when name is empty' do
    env = EnvironmentProperty.new(:key => 'env_property')
    expect { env.save! }.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name can't be blank")
  end

  it 'is not valid when key is numeric' do
    env = EnvironmentProperty.new(:name => 'envprop', :key => '1')
    expect { env.save! }.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Key should contain alpha numeric and underscore characters only")
  end

  it 'is only valid when name and key are defined' do
    env = EnvironmentProperty.new(:name => 'envprop', :key => 'envprop')
    expect(env).to be_valid
  end

  it 'is not valid when name has a duplicate' do

    env = EnvironmentProperty.new(:name => 'envprop', :key => 'envprop', application: @application)
    env.save!
    env2 = EnvironmentProperty.new(:name => 'envprop', :key => 'envprop', application: @application)
    expect { env2.save! }.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name has already been taken, Key has already been taken. Note: key is generated by converting name to lowercase and symbols to underscores by default.")

  end


  it 'should return an error if environment property indicated is non-existent' do
    @record = create_record(@application)
    env = Environment.new(:name => 'test', :key => 'test', :application_id => @application.id)
    expect(env).to be_valid
    env.save!
    expect { EnvironmentProperty.get(@record, 'prop') }.to raise_exception("No environment property matching key prop")
  end


  it 'environment property get method should return the value of the indicated environment property' do
    @record = create_record(@application)
    env = Environment.new(:name => 'test', :key => 'test', :application_id => @application.id)
    env.save!
    envprop = EnvironmentProperty.new(:name => 'envprop', :key => 'envprop', application: @application)
    envprop.save!
    expect(EnvironmentProperty.get(@record, 'envprop')).to eq('')
  end


  it 'environment property set method successfully updates the value of the indicated environment property' do
    @record = create_record(@application)
    env = Environment.new(:name => 'test', :key => 'test', :application_id => @application.id)
    env.save!
    envprop = EnvironmentProperty.new(:name => 'envprop', :key => 'envprop', application: @application)
    envprop.save!
    EnvironmentProperty.set(@record, envprop.key, 'value')
    expect(EnvironmentProperty.get(@record, 'envprop')).to eq('value')
  end

end