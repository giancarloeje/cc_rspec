require 'spec_helper'
require 'factories'

describe 'Server Flow', type: :model do

  before(:each) do
    @application = FactoryBot.create(:application)
    @environment = FactoryBot.create(:environment, :name => 'test', :key => 'test', application: @application)
    @schedule = FactoryBot.create(:schedule, :name => 'server_flow', :key => 'server_flow', application: @application)
    define_record_factory(nil, @application)
  end

  it 'should return server flow is valid' do
    server_flow = FactoryBot.create(:server_flow, key: 'server', name: 'server', application: @application)
    expect(server_flow).to be_valid
    expect(ServerFlow.count).to eq(1)
  end

  it 'should not save blank server flow form' do
    server_flow = ServerFlow.new
    expect {server_flow.save!}.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name can't be blank, Key can't be blank, Key should contain alpha numeric and underscore characters only")
  end

  it 'should not allow duplicate server flow names' do
    server_flow = ServerFlow.new(:name => 'server', :key => 'server', application: @application)
    server_flow.save!
    server_flow2 = ServerFlow.new(:name => 'server', :key => 'server', application: @application)
    expect {server_flow2.save!}.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name has already been taken, Key has already been taken. Note: key is generated by converting name to lowercase and symbols to underscores by default.")

  end

  # Environment, Environment Properties and Schedule modules were introduced. Test scenarios are now updated.

  it 'should enqueue server flow after save' do
    @schedule_value = ScheduleValue.create(:id => '1', :environment_id => @environment.id, :schedule_id => @schedule.id, :key => 'run_server_flow', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    server_flow = ServerFlow.new(:name => 'serverFlow', :key => 'serverFlow', schedule_id: @schedule.id, application: @application)
    server_flow.save!
    i = Delayed::Job.count
    expect(i).to eq(1)
  end

  it 'should enqueue server flow using past start_time' do
    @schedule_value = ScheduleValue.create(:id => '1', :environment_id => @environment.id, :schedule_id => @schedule.id, :key => 'run_data_extract', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now - 1.day)
    @server_flow = FactoryBot.create(:server_flow, name:'server', key:'server', schedule_id: @schedule.id, application: @application)
    expect(Delayed::Job.count).to eq(1)
  end

  it 'should not enqueue server flow when schedule is not defined' do
    @server_flow = FactoryBot.create(:server_flow, name:'server', key:'server', schedule_id: @schedule.id, application: @application)
    expect(Delayed::Job.count).to eq(0)
  end

  it 'should delete server flow from delayed jobs when schedule is deleted' do
    schedule_value = ScheduleValue.create(:environment_id => @environment.id, :schedule_id => @schedule.id, :key => 'run_server_flow', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    @server_flow = FactoryBot.create(:server_flow, name: 'server', key: 'server', schedule_id: @schedule.id,  application: @application)
    count = Delayed::Job.count
    @schedule.destroy!
    expect(count).not_to equal Delayed::Job.count
  end

  it 'should delete server flow from delayed jobs when environment is deleted' do # This does not work for some reason!
    schedule_value = ScheduleValue.create(:environment_id => @environment.id, :schedule_id => @schedule.id, :key => 'run_server_flow', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    @server_flow = FactoryBot.create(:server_flow, name: 'server', key: 'server', schedule_id: @schedule.id,  application: @application)
    count = Delayed::Job.count
    @environment.destroy!
    expect(count).not_to eql Delayed::Job.count
  end

  it 'should not enqueue server flow if start_time is blank' do
    schedule_value = ScheduleValue.create(:environment_id => @environment.id, :schedule_id => @schedule.id, :key => 'run_server_flow', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => '')
    @server_flow = FactoryBot.create(:server_flow, name: 'server', key: 'server', schedule_id: @schedule.id,  application: @application)
    expect(Delayed::Job.count).to equal 0
  end

  it 'should not enqueue server flow when it is disabled' do
    @schedule_value = ScheduleValue.create(:id => '1', :environment_id => @environment.id, :schedule_id => @schedule.id, :key => 'run_data_extract', :is_enabled => '0', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    @server_flow = FactoryBot.create(:server_flow, name:'server', key:'server', schedule_id: @schedule.id, application: @application)
    expect(Delayed::Job.count).to eq(0)
  end

  it 'should process server flow' do
    @field = FactoryBot.create(:field, name:'field', key:'field', default_value:'1', field_type:'Integer', application: @application)
    @modifier = FactoryBot.create(:modifier, name:'modifier', key:'modifier', code: 'self.field = self.field + 1', application: @application)
    @server_flow = FactoryBot.create(:server_flow, name:'server', key:'server', application: @application, data: '{"modules":[{"name":"Entry point","key":"Entry point","type":"entry_point","value":{},"config":{"position":[70,32],"xtype":"WireIt.ImageContainer"}},{"name":"modifier","key":"modifier","type":"modifier","value":{},"config":{"position":[146,128],"xtype":"WireIt.ImageLabelContainer"}},{"name":"Save","key":"Save","type":
                  "save","value":{},"config":{"position":[183,223],"xtype":"WireIt.ImageContainer"}},{"name":"End point","key":"End point","type":"end_point","value":{},"config":{"position":[220,325],"xtype":"WireIt.ImageContainer"}}],"wires":[{"xtype":"WireIt.BezierWire","src":{"moduleId":0,"terminal":"ENTRY_POINT"},"tgt":{"moduleId":1,"terminal":"MODIFIER_INPUT"}},{"xtype":"WireIt.BezierWire","src":{"moduleId":1,"terminal":"MODIFIER_OUTPUT"},"tgt":{"moduleId":2,"terminal":"SAVE_INPUT"}},
                  {"xtype":"WireIt.BezierWire","src":{"moduleId":2,"terminal":"SAVE_OUTPUT"},"tgt":{"moduleId":3,"terminal":"END_POINT"}}],"properties":{"name":"","description":""}}')
    @record = create_record(@application)
    @server_flow.process_flow(@server_flow, @record)
    expect(@record.field).to eq(2)
  end

  it 'should delete server flow from delayed jobs' do
    @schedule_value = ScheduleValue.create(:id => '1', :environment_id => @environment.id, :schedule_id => @schedule.id, :key => 'run_data_extract', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    @server_flow = FactoryBot.create(:server_flow, name:'server', key:'server', schedule_id: @schedule.id, application: @application)
    @server_flow.delete_job
    expect(Delayed::Job.count).to eq(0)
  end

  it 'should run server flow when queue is defined (CMOSD-487)' do
    @field = FactoryBot.create(:field, name:'field', key:'field', field_type:'Integer', default_value:'1', application: @application)
    @filter = FactoryBot.create(:filter, name:'queue', key:'queue', data:'{"columndata":[{"tableslot":"type=Integer&table=[NO TABLE]&field=field", "table":"[NO TABLE]", "field":"field", "columnas":"field" ,
                "columnhidden":"undefined"}],"sortdata":[],"groupdata":[],"wheredata":[]}', application: @application)
    @modifier = FactoryBot.create(:modifier, name:'modifier', key:'modifier', code:'self.field = self.field + 1', application: @application)
    @server_flow = FactoryBot.create(:server_flow, name:'server', key:'server', filter_id: '1', application: @application, data:'{"modules":[{"name":"Entry point","key":"Entry point","type":"entry_point","value":{},"config":{"position":[70,32],"xtype":"WireIt.ImageContainer"}},{"name":"modifier","key":"modifier","type":"modifier","value":{},"config":{"position":[146,128],"xtype":"WireIt.ImageLabelContainer"}},{"name":"Save","key":"Save","type":
                "save","value":{},"config":{"position":[183,223],"xtype":"WireIt.ImageContainer"}},{"name":"End point","key":"End point","type":"end_point","value":{},"config":{"position":[220,325],"xtype":"WireIt.ImageContainer"}}],"wires":[{"xtype":"WireIt.BezierWire","src":{"moduleId":0,"terminal":"ENTRY_POINT"},"tgt":{"moduleId":1,"terminal":"MODIFIER_INPUT"}},{"xtype":"WireIt.BezierWire","src":{"moduleId":1,"terminal":"MODIFIER_OUTPUT"},
                "tgt":{"moduleId":2,"terminal":"SAVE_INPUT"}},{"xtype":"WireIt.BezierWire","src":{"moduleId":2,"terminal":"SAVE_OUTPUT"},"tgt":{"moduleId":3,"terminal":"END_POINT"}}],"properties":{"name":"","description":""}}')
    @record = create_record(@application)
    @server_flow.process_flow(@server_flow, @record)
    expect(@record.field).to eq(2)
  end

end