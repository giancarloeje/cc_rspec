require 'spec_helper'
require 'factories'

describe 'Data Extract', type: :model do

  before(:each) do
    @application = FactoryBot.create(:application)
    define_record_factory(nil, @application)
  end

  it 'is not valid when attributes are not defined' do
    de = DataExtract.new
    expect{de.save!}.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name can't be blank, Key can't be blank, Key should contain alpha numeric and underscore characters only, Separator can't be blank, Storage type can't be blank, File path can't be blank")
  end

  it 'is not valid when name is empty' do
    de = DataExtract.new(:key => 'data', :separator => ",")
    expect{de.save!}.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name can't be blank, Storage type can't be blank, File path can't be blank")
  end

  it 'is not valid when key is numeric' do
    de = DataExtract.new(:name => "Data Extract", :key => '1', :separator => ",", :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test")
    expect{de.save!}.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Key should contain alpha numeric and underscore characters only")
  end

  it 'is only valid when name, key, storage type, file path, and separator are defined' do
    de = DataExtract.new(:name => 'data', :key => 'data', :separator => ",", :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test", :application => @application)
    expect(de).to be_valid
  end

  it 'is not valid when name has a duplicate' do
    de = DataExtract.new(:name => 'data', :key => 'data', :separator => ",", :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test", :application => @application)
    de.save!
    de2 = DataExtract.new(:name => 'data', :key => 'data', :separator => ",", :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test", :application => @application)
    expect{de2.save!}.to raise_exception(ActiveRecord::RecordInvalid, "Validation failed: Name has already been taken, Key has already been taken. Note: key is generated by converting name to lowercase and symbols to underscores by default.")
  end

  it 'is not enqueued when schedule is disabled' do
    env = FactoryBot.create(:environment, :name => 'test', :key => 'test', application: @application)
    schedule = FactoryBot.create(:schedule, :name => 'run data extract', :key => 'run_data_extract', application: @application)
    @schedule_value = ScheduleValue.create(:id => '1', :environment_id => env.id, :schedule_id => schedule.id, :key => 'run_data_extract', :is_enabled => '0', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    de = DataExtract.new(:name => 'data', :key => 'data', :separator => ",", :schedule_id => schedule.id, :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test", :application => @application)
    de.save!
    i = Delayed::Job.count
    expect(i).to eq(0)
  end

  it 'is enqueued when schedule is enabled' do
    env = FactoryBot.create(:environment, :name => 'test', :key => 'test', application: @application)
    schedule = FactoryBot.create(:schedule, :name => 'run data extract', :key => 'run_data_extract', application: @application)
    @schedule_value = ScheduleValue.create(:id => '1', :environment_id => env.id, :schedule_id => schedule.id, :key => 'run_data_extract', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    de = DataExtract.new(:name => 'data', :key => 'data', :separator => ",", :schedule_id => schedule.id, :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test", :application => @application)
    de.save!
    i = Delayed::Job.count
    expect(i).to eq(1)
  end

  it 'is not enqueued when no schedule is defined' do
    env = FactoryBot.create(:environment, :name => 'test', :key => 'test', application: @application)
    schedule = FactoryBot.create(:schedule, :name => 'run data extract', :key => 'run_data_extract', application: @application)
    de = DataExtract.new(:name => 'data', :key => 'data', :separator => ",", :schedule_id => schedule.id, :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test", :application => @application)
    de.save!
    i = Delayed::Job.count
    expect(i).to eq(0)
  end

  it 'is removed from delayed jobs' do
    env = FactoryBot.create(:environment, :name => 'test', :key => 'test', application: @application)
    schedule = FactoryBot.create(:schedule, :name => 'run data extract', :key => 'run_data_extract', application: @application)
    @schedule_value = ScheduleValue.create(:id => '1', :environment_id => env.id, :schedule_id => schedule.id, :key => 'run_data_extract', :is_enabled => '1', :run_interval => '1', :run_interval_unit => 'days', :start_time => Time.now)
    de = DataExtract.new(:name => 'data', :key => 'data', :separator => ",", :schedule_id => schedule.id, :storage_type => "S3 bucket", :file_path => "casecenter-assets-test-784231/test", :application => @application)
    de.save!
    i = Delayed::Job.count
    expect(i).to eq(1)

    de.delete_job
    i = Delayed::Job.count
    expect(i).to eq(0)
  end

end